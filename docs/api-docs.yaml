openapi: 3.0.0
info:
  title: Kairo Sync API
  version: 1.0.0
  description: Event management platform with authentication, profiles, events, and templates
servers:
  - url: http://localhost:5000/api
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Base schemas
    PhoneNumber:
      type: object
      required: [phoneNumber]
      properties:
        phoneNumber:
          type: string
          pattern: '^03[0-9]{9}$'
          example: "03001234567"

    # Authentication schemas
    SignupRequest:
      allOf:
        - $ref: '#/components/schemas/PhoneNumber'
        - type: object
          required: [password]
          properties:
            password:
              type: string
              minLength: 8
              example: "12345678"

    LoginRequest:
      allOf:
        - $ref: '#/components/schemas/PhoneNumber'
        - type: object
          required: [password]
          properties:
            password:
              type: string
            fcmToken:
              type: string

    OTPRequest:
      allOf:
        - $ref: '#/components/schemas/PhoneNumber'
        - type: object
          required: [otp]
          properties:
            otp:
              type: string
              pattern: '^[0-9]{6}$'

    ResetPasswordRequest:
      allOf:
        - $ref: '#/components/schemas/OTPRequest'
        - type: object
          required: [newPassword]
          properties:
            newPassword:
              type: string
              minLength: 8

    # Profile schemas
    ProfileRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        userName:
          type: string
          maxLength: 50
        dateOfBirth:
          type: string
          format: date
        gender:
          type: string
          enum: [male, female, other]
        profilePicture:
          type: string
          format: binary

    # Event schemas
    EventRequest:
      type: object
      required: [name, startDate, startTime]
      properties:
        name:
          type: string
          maxLength: 200
        location:
          type: string
          maxLength: 300
        lat:
          type: number
          minimum: -90
          maximum: 90
        lng:
          type: number
          minimum: -180
          maximum: 180
        visibility:
          type: string
          enum: [public, private]
          default: public
        capacity:
          type: integer
          minimum: 1
        additionalNotes:
          type: string
          maxLength: 1000
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        startTime:
          type: string
          format: time
        endTime:
          type: string
          format: time
        inviteUserIds:
          type: array
          items:
            type: string
        coverPic:
          type: string
          format: binary

    InviteRequest:
      type: object
      required: [userIds]
      properties:
        userIds:
          type: array
          items:
            type: string
          minItems: 1

    InvitationResponse:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [accepted, rejected]
        message:
          type: string
          maxLength: 500

    # Template schemas
    TemplateRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
          maxLength: 100
        userIds:
          type: array
          items:
            type: string

    # Contact schemas
    Contact:
      type: object
      required: [name, phone]
      properties:
        name:
          type: string
          maxLength: 100
        phone:
          type: string

    ContactSyncRequest:
      type: object
      required: [contacts]
      properties:
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
          maxItems: 1000

    # Response schemas
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
        error:
          type: string

  responses:
    Success:
      description: Operation successful
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    
    Created:
      description: Resource created successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    
    BadRequest:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

paths:
  # Authentication endpoints
  /signup:
    post:
      tags: [Authentication]
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'

  /login:
    post:
      tags: [Authentication]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /verify-otp:
    post:
      tags: [Authentication]
      summary: Verify OTP code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'

  /resend-otp:
    post:
      tags: [Authentication]
      summary: Resend OTP code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneNumber'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'

  /forgot-password:
    post:
      tags: [Authentication]
      summary: Initiate password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneNumber'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'

  /reset-password:
    post:
      tags: [Authentication]
      summary: Reset password with OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'

  # Profile endpoints
  /profile:
    get:
      tags: [Profile]
      summary: Get current user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /complete-profile:
    put:
      tags: [Profile]
      summary: Complete profile setup
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /update-profile:
    put:
      tags: [Profile]
      summary: Update user profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users/{userId}:
    get:
      tags: [Profile]
      summary: Get user by ID
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Event endpoints
  /events:
    get:
      tags: [Events]
      summary: Get events with filters
      security:
        - BearerAuth: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [all, public, private, hosted, invited, upcoming]
            default: all
        - name: filter
          in: query
          schema:
            type: string
            enum: [recommended, recent, distant, nearest, farthest]
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: search
          in: query
          schema:
            type: string
        - name: userLat
          in: query
          schema:
            type: number
            minimum: -90
            maximum: 90
        - name: userLng
          in: query
          schema:
            type: number
            minimum: -180
            maximum: 180
        - name: sortBy
          in: query
          schema:
            type: string
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
            default: DESC
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    post:
      tags: [Events]
      summary: Create new event
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventRequest'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /events/{eventId}:
    get:
      tags: [Events]
      summary: Get event details
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      tags: [Events]
      summary: Update event
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      tags: [Events]
      summary: Delete event
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /events/{eventId}/invite:
    post:
      tags: [Events]
      summary: Invite users to event
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /events/{eventId}/respond:
    post:
      tags: [Events]
      summary: Respond to event invitation
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationResponse'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Template endpoints
  /templates:
    get:
      tags: [Templates]
      summary: Get user templates
      security:
        - BearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    post:
      tags: [Templates]
      summary: Create new template
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateRequest'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /templates/{templateId}:
    put:
      tags: [Templates]
      summary: Update template
      security:
        - BearerAuth: []
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      tags: [Templates]
      summary: Delete template
      security:
        - BearerAuth: []
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Contact endpoints
  /contacts/sync:
    post:
      tags: [Contacts]
      summary: Sync user contacts
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactSyncRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'